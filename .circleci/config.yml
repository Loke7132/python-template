version: 2.1

orbs:
  python: circleci/python@2.0.3
  slack: circleci/slack@4.12.5

parameters:
  python-version:
    type: string
    default: "3.12"

commands:
  install-dependencies:
    steps:
      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "pyproject.toml" }}
            - v1-deps-{{ .Branch }}
            - v1-deps
      - run:
          name: Install pip
          command: |
            python -m pip install --upgrade pip
      - run:
          name: Install Dependencies
          command: |
            pip install -e ".[dev]"
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - ~/.cache/pip
            - ~/.local/lib/python3.12/site-packages

jobs:
  static-analysis:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    resource_class: small
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run Static Analysis
          command: |
            ruff check .
            mypy .

  unit-tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    resource_class: medium
    parallelism: 4
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run Unit Tests
          command: |
            mkdir -p test-results/unit
            TESTFILES=$(circleci tests glob "tests/unit/*.py" | circleci tests split --split-by=timings)
            pytest $TESTFILES --cov=src --cov-report=html:coverage_html --junitxml=test-results/unit/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage_html
          destination: coverage-report-unit

  integration-tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    resource_class: medium
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run Integration Tests
          command: |
            mkdir -p test-results/integration
            pytest tests/integration/ --cov=src --cov-report=html:coverage_html --junitxml=test-results/integration/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage_html
          destination: coverage-report-integration

  e2e-tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    resource_class: large
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run E2E Tests
          command: |
            mkdir -p test-results/e2e
            pytest tests/e2e/ --cov=src --cov-report=html:coverage_html --junitxml=test-results/e2e/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage_html
          destination: coverage-report-e2e
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-staging:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Deploy to Staging
          command: |
            echo "Deploying to staging environment"
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-production:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Deploy to Production
          command: |
            echo "Deploying to production environment"
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - static-analysis
      - unit-tests:
          requires:
            - static-analysis
      - integration-tests:
          requires:
            - unit-tests
          filters:
            branches:
              only:
                - main
                - develop
      - e2e-tests:
          requires:
            - integration-tests
          filters:
            branches:
              only:
                - main
                - develop
      - deploy-staging:
          requires:
            - e2e-tests
          filters:
            branches:
              only: develop
      - hold-production-deploy:
          type: approval
          requires:
            - e2e-tests
          filters:
            branches:
              only: main
      - deploy-production:
          requires:
            - hold-production-deploy
          filters:
            branches:
              only: main

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - static-analysis
      - unit-tests:
          requires:
            - static-analysis
      - integration-tests:
          requires:
            - unit-tests
      - e2e-tests:
          requires:
            - integration-tests
